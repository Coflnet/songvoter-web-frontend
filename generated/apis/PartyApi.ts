/* tslint:disable */
/* eslint-disable */
/**
 * Songvoter
 * Songvoter
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@coflnet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoflnetSongVoterDBModelsPlatforms,
  CoflnetSongVoterModelsInvite,
  CoflnetSongVoterModelsParty,
  CoflnetSongVoterModelsPartyPlaylistEntry,
  CoflnetSongVoterModelsSong,
} from '../models/index';
import {
    CoflnetSongVoterDBModelsPlatformsFromJSON,
    CoflnetSongVoterDBModelsPlatformsToJSON,
    CoflnetSongVoterModelsInviteFromJSON,
    CoflnetSongVoterModelsInviteToJSON,
    CoflnetSongVoterModelsPartyFromJSON,
    CoflnetSongVoterModelsPartyToJSON,
    CoflnetSongVoterModelsPartyPlaylistEntryFromJSON,
    CoflnetSongVoterModelsPartyPlaylistEntryToJSON,
    CoflnetSongVoterModelsSongFromJSON,
    CoflnetSongVoterModelsSongToJSON,
} from '../models/index';

export interface PartyDownvoteSongIdPostRequest {
    songId: string;
}

export interface PartyInviteIdJoinPostRequest {
    inviteId: string;
}

export interface PartyInviteUserIdPostRequest {
    partyId: string;
    userId: string;
}

export interface PartyKickUserIdPostRequest {
    userId: string;
}

export interface PartyPartyIdResetPostRequest {
    partyId: string;
}

export interface PartyPostRequest {
    name?: string;
    supportedPlatforms?: CoflnetSongVoterDBModelsPlatforms;
}

export interface PartyRemoveVoteSongIdPostRequest {
    songId: string;
}

export interface PartySongSongIdPlayedPostRequest {
    songId: string;
}

export interface PartyUpvoteSongIdPostRequest {
    songId: string;
}

/**
 * 
 */
export class PartyApi extends runtime.BaseAPI {

    /**
     * votes a song down so it is play later/not at all
     */
    async partyDownvoteSongIdPostRaw(requestParameters: PartyDownvoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.songId === null || requestParameters.songId === undefined) {
            throw new runtime.RequiredError('songId','Required parameter requestParameters.songId was null or undefined when calling partyDownvoteSongIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/downvote/{songId}`.replace(`{${"songId"}}`, encodeURIComponent(String(requestParameters.songId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * votes a song down so it is play later/not at all
     */
    async partyDownvoteSongIdPost(requestParameters: PartyDownvoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partyDownvoteSongIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all parties of the curent user
     */
    async partyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoflnetSongVoterModelsParty>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoflnetSongVoterModelsPartyFromJSON(jsonValue));
    }

    /**
     * Returns all parties of the curent user
     */
    async partyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoflnetSongVoterModelsParty> {
        const response = await this.partyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Joins a party
     */
    async partyInviteIdJoinPostRaw(requestParameters: PartyInviteIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inviteId === null || requestParameters.inviteId === undefined) {
            throw new runtime.RequiredError('inviteId','Required parameter requestParameters.inviteId was null or undefined when calling partyInviteIdJoinPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/{inviteId}/join`.replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters.inviteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Joins a party
     */
    async partyInviteIdJoinPost(requestParameters: PartyInviteIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partyInviteIdJoinPostRaw(requestParameters, initOverrides);
    }

    /**
     * Creates an invite link for a party
     */
    async partyInviteLinkGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoflnetSongVoterModelsInvite>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/inviteLink`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoflnetSongVoterModelsInviteFromJSON(jsonValue));
    }

    /**
     * Creates an invite link for a party
     */
    async partyInviteLinkGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoflnetSongVoterModelsInvite> {
        const response = await this.partyInviteLinkGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Invites a user to a party
     */
    async partyInviteUserIdPostRaw(requestParameters: PartyInviteUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling partyInviteUserIdPost.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling partyInviteUserIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/invite/{userId}`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invites a user to a party
     */
    async partyInviteUserIdPost(requestParameters: PartyInviteUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partyInviteUserIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * kicks a user from a party
     */
    async partyKickUserIdPostRaw(requestParameters: PartyKickUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling partyKickUserIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/kick/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * kicks a user from a party
     */
    async partyKickUserIdPost(requestParameters: PartyKickUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partyKickUserIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Leave a party
     */
    async partyLeavePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/leave`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Leave a party
     */
    async partyLeavePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partyLeavePostRaw(initOverrides);
    }

    /**
     * gets the next Song
     */
    async partyNextSongGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoflnetSongVoterModelsSong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/nextSong`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoflnetSongVoterModelsSongFromJSON(jsonValue));
    }

    /**
     * gets the next Song
     */
    async partyNextSongGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoflnetSongVoterModelsSong> {
        const response = await this.partyNextSongGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * resets the parties playing state
     */
    async partyPartyIdResetPostRaw(requestParameters: PartyPartyIdResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling partyPartyIdResetPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/{partyId}/reset`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * resets the parties playing state
     */
    async partyPartyIdResetPost(requestParameters: PartyPartyIdResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partyPartyIdResetPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async partyPlaylistGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoflnetSongVoterModelsPartyPlaylistEntry>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/playlist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoflnetSongVoterModelsPartyPlaylistEntryFromJSON));
    }

    /**
     */
    async partyPlaylistGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoflnetSongVoterModelsPartyPlaylistEntry>> {
        const response = await this.partyPlaylistGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a new party
     */
    async partyPostRaw(requestParameters: PartyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoflnetSongVoterModelsParty>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.supportedPlatforms !== undefined) {
            queryParameters['SupportedPlatforms'] = requestParameters.supportedPlatforms;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoflnetSongVoterModelsPartyFromJSON(jsonValue));
    }

    /**
     * Creates a new party
     */
    async partyPost(requestParameters: PartyPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoflnetSongVoterModelsParty> {
        const response = await this.partyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove vote from song
     */
    async partyRemoveVoteSongIdPostRaw(requestParameters: PartyRemoveVoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.songId === null || requestParameters.songId === undefined) {
            throw new runtime.RequiredError('songId','Required parameter requestParameters.songId was null or undefined when calling partyRemoveVoteSongIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/removeVote/{songId}`.replace(`{${"songId"}}`, encodeURIComponent(String(requestParameters.songId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove vote from song
     */
    async partyRemoveVoteSongIdPost(requestParameters: PartyRemoveVoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partyRemoveVoteSongIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Marks a song as played
     */
    async partySongSongIdPlayedPostRaw(requestParameters: PartySongSongIdPlayedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.songId === null || requestParameters.songId === undefined) {
            throw new runtime.RequiredError('songId','Required parameter requestParameters.songId was null or undefined when calling partySongSongIdPlayedPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/song/{songId}/played`.replace(`{${"songId"}}`, encodeURIComponent(String(requestParameters.songId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Marks a song as played
     */
    async partySongSongIdPlayedPost(requestParameters: PartySongSongIdPlayedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partySongSongIdPlayedPostRaw(requestParameters, initOverrides);
    }

    /**
     * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
     * votes a song up so it is play sooner
     */
    async partyUpvoteSongIdPostRaw(requestParameters: PartyUpvoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.songId === null || requestParameters.songId === undefined) {
            throw new runtime.RequiredError('songId','Required parameter requestParameters.songId was null or undefined when calling partyUpvoteSongIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/party/upvote/{songId}`.replace(`{${"songId"}}`, encodeURIComponent(String(requestParameters.songId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
     * votes a song up so it is play sooner
     */
    async partyUpvoteSongIdPost(requestParameters: PartyUpvoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partyUpvoteSongIdPostRaw(requestParameters, initOverrides);
    }

}
